import numpy as np
import pandas as pd


def inject_shilling_attacks(train_df, movies,
                            attack_type="random",
                            n_attack_users=50,
                            filler_ratio=0.1,
                            target_movie_id=1,
                            rating_scale=(1, 5)):
    """
    Gi·∫£ l·∫≠p shilling attacks b·∫±ng c√°ch ch√®n th√™m user gi·∫£ v√†o train_df.
    
    Args:
        train_df (pd.DataFrame): D·ªØ li·ªáu ratings g·ªëc (userId, movieId, rating, date).
        movies (pd.DataFrame): Th√¥ng tin phim (kh√¥ng d√πng nhi·ªÅu ·ªü ƒë√¢y).
        attack_type (str): Ki·ªÉu attack ("random", "average").
        n_attack_users (int): S·ªë l∆∞·ª£ng attacker c·∫ßn ch√®n.
        filler_ratio (float): T·ªâ l·ªá s·ªë phim filler m·ªói attacker s·∫Ω rating.
        target_movie_id (int): Phim m·ª•c ti√™u b·ªã t·∫•n c√¥ng (s·∫Ω ƒë∆∞·ª£c rate cao).
        rating_scale (tuple): Thang ƒëi·ªÉm (min_rating, max_rating).

    Returns:
        train_new (pd.DataFrame): DataFrame train c√≥ th√™m attacker.
        y_attack (dict): Dict {userId: 0 n·∫øu normal, 1 n·∫øu attacker}.
    """
    train_new = train_df.copy()
    all_users = train_df['userId'].unique().tolist()

    # T·∫°o userId m·ªõi cho attacker
    start_uid = max(all_users) + 1
    attacker_ids = list(range(start_uid, start_uid + n_attack_users))

    ratings = []
    min_rating, max_rating = rating_scale

    all_movies = train_df['movieId'].unique()
    n_filler = int(filler_ratio * len(all_movies))

    for uid in attacker_ids:
        filler_items = np.random.choice(all_movies, size=n_filler, replace=False)

        for mid in filler_items:
            if attack_type == "random":
                r = np.random.uniform(min_rating, max_rating)
            elif attack_type == "average":
                # trung b√¨nh rating c·ªßa phim ƒë√≥
                r = train_df[train_df['movieId'] == mid]['rating'].mean()
                if np.isnan(r):
                    r = np.random.uniform(min_rating, max_rating)
            else:
                raise ValueError("attack_type ph·∫£i l√† random | average")

            ratings.append((uid, mid, r, "2005-01-01"))

        # Target movie lu√¥n rate = max
        ratings.append((uid, target_movie_id, max_rating, "2005-01-01"))

    # G·ªôp attacker v√†o train g·ªëc
    df_attack = pd.DataFrame(ratings, columns=["userId", "movieId", "rating", "date"])
    train_new = pd.concat([train_new, df_attack], ignore_index=True)

    # Build nh√£n: attacker =1, normal =0
    y_attack = {uid: 0 for uid in train_new['userId'].unique()}
    for uid in attacker_ids:
        y_attack[uid] = 1

    # In th·ªëng k√™ g·ªçn
    n_attack = sum(y_attack.values())
    n_normal = len(y_attack) - n_attack
    print(f"üîπ S·ªë l∆∞·ª£ng user Attack ƒë∆∞·ª£c ch√®n: {len(attacker_ids)}")
    print(f"   ‚Üí T·ªïng s·ªë user Attack trong nh√£n: {n_attack}")
    print(f"   ‚Üí T·ªïng s·ªë user Normal trong nh√£n: {n_normal}")

    return train_new, y_attack
